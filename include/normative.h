#ifndef NORMATIVE_H
#define NORMATIVE_H

#include <string>
#include <memory>
#include <iostream>

/**
 * Представляет класс Normative, отвечающий за обработку данных нормативов
 * и их поведение в рамках приложения.
 *
 * Класс Normative инкапсулирует основную функциональность и атрибуты,
 * которые определяют и управляют нормативами, предоставляя методы и свойства,
 * необходимые для их обработки и анализа.
 */
struct Normative {
    /**
     * Хранит название норматива.
     * Указывает тип или категорию деятельности или события, например, "Бег 100м".
     */
    std::string name;
    /**
     * Представляет дату проведения нормативного события или выполнения норматива.
     * Эта строка содержит информацию о дате для экземпляра класса Normative
     * или его производных классов. Формат даты должен быть единообразным
     * во всех экземплярах для корректного отображения и обработки.
     */
    std::string date;
    /**
     * Представляет результат выполнения конкретного норматива.
     * Эта переменная используется в структуре `Normative` для хранения результата,
     * достигнутого во время определённого события или активности.
     */
    double result;
    /**
     * Представляет оценку за выполнение конкретного норматива.
     *
     * Эта переменная используется для хранения оценки, полученной
     * по результатам выполнения определённых нормативов, например, в беге на дистанцию.
     */
    int grade;
    /**
     * Конструктор по умолчанию для класса Normative.
     * Инициализирует все переменные-члены значениями по умолчанию.
     *
     * @return Экземпляр Normative, созданный с использованием конструктора по умолчанию.
     */
    Normative() = default;
    /**
     * Конструктор класса Normative, инициализирующий его переменные-члены.
     *
     * @param name_ Название нормативного элемента.
     * @param date_ Дата, связанная с нормативным элементом.
     * @param result_ Результат выполнения норматива, представленный в виде значения типа double.
     * @param grade_ Оценка, соответствующая нормативу, представленная в виде целого числа.
     */
    Normative(const std::string& name_, const std::string& date_, double result_, int grade_)
        : name(name_), date(date_), result(result_), grade(grade_) {}
    /**
     * Виртуальный деструктор для класса Normative.
     *
     * Обеспечивает корректный вызов деструкторов производных классов при удалении
     * объектов через указатель на базовый класс. Это важно для правильного освобождения
     * ресурсов в производных классах.
     */
    virtual ~Normative() = default;
    /**
     * Выводит данные в стандартный вывод.
     *
     * Этот метод отвечает за печать переданного содержимого
     * в консоль или терминал и обычно используется для отображения
     * информационных сообщений или результатов пользователю.
     */
    virtual void print() const = 0;
    /**
     * Создаёт и возвращает глубокую копию текущего экземпляра объекта.
     *
     * @return Умный указатель (shared_ptr) на новый экземпляр Normative, являющийся копией текущего объекта.
     */
    virtual std::shared_ptr<Normative> clone() const = 0;
};
/**
 * Класс Run100 представляет собой специализированный норматив,
 * описывающий результаты и поведение для забега на 100 метров.
 *
 * Класс наследуется от базового класса Normative и добавляет конкретную
 * реализацию, связанную с нормативами этого типа. Включает методы для
 * вывода информации и создания копий объекта.
 */
struct Run100 : public Normative {
    /**
     * Конструктор класса Run100 по умолчанию.
     *
     * Инициализирует экземпляр класса Run100 с заранее заданным названием "Бег 100м".
     *
     * @return Экземпляр класса Run100, созданный с названием "Бег 100м".
     */
    Run100() { name = "Бег 100м"; }
    /**
     * Конструктор для создания объекта, представляющего результат теста "Бег 100м".
     *
     * Конструктор инициализирует объект с указанием даты проведения теста,
     * результата и оценки, а также устанавливает название теста "Бег 100м".
     *
     * @param date_ Дата проведения теста.
     * @param result_ Результат, показанный участником в тесте.
     * @param grade_ Оценка, полученная за результат.
     * @return Экземпляр класса Run100 с заданными значениями.
     */
    Run100(const std::string& date_, double result_, int grade_) {
        name = "Бег 100м";
        date = date_;
        result = result_;
        grade = grade_;
    }
    /**
     * Реализует вывод информации о нормативе "Бег 100м" в стандартный поток.
     *
     * Переопределяет виртуальный метод `print` базового класса Normative,
     * форматируя и отображая данные, такие как название норматива, дата, результат
     * и оценка. Этот метод служит для информативного представления данных
     * экземпляра класса в консоли.
     */
    void print() const override {
        std::cout << name << " | Дата: " << date << " | Результат: " << result << " | Оценка: " << grade << '\n';
    }
    /**
     * Создаёт и возвращает глубокую копию текущего экземпляра объекта Run100.
     *
     * Этот метод выполняет глубокое копирование текущего объекта Run100,
     * создавая новый экземпляр с теми же данными и возвращая его
     * в виде умного указателя shared_ptr.
     *
     * @return Умный указатель (shared_ptr) на новый экземпляр Run100, являющийся копией текущего объекта.
     */
    std::shared_ptr<Normative> clone() const override {
        return std::make_shared<Run100>(*this);
    }
};
/**
 * Представляет класс Run1000, отвечающий за обработку данных норматива
 * бега на дистанцию 1000 метров.
 *
 * Класс Run1000 является производным от класса Normative и
 * инкапсулирует функциональность, специфичную для норматива
 * "Бег 1000м". Он предоставляет методы для инициализации объекта,
 * вывода информации о нормативе и копирования экземпляра.
 */
struct Run1000 : public Normative {
    /**
     * Конструктор по умолчанию для класса Run1000.
     *
     * Устанавливает название норматива как "Бег 1000м".
     *
     * @return Экземпляр Run1000, созданный с названием "Бег 1000м".
     */
    Run1000() { name = "Бег 1000м"; }
    /**
     * Конструктор класса Run1000, представляющий норматив "Бег 1000м".
     * Инициализирует название норматива, дату его выполнения, результат и оценку.
     *
     * @param date_ Дата выполнения норматива.
     * @param result_ Результат выполнения норматива.
     * @param grade_ Оценка выполнения норматива.
     * @return Создает экземпляр объекта Run1000 с заданными параметрами.
     */
    Run1000(const std::string& date_, double result_, int grade_) {
        name = "Бег 1000м";
        date = date_;
        result = result_;
        grade = grade_;
    }
    /**
     * Выводит информацию о выполнении норматива в стандартный вывод.
     *
     * Этот метод переопределяет виртуальный метод базового класса Normative
     * и отображает данные о нормативе, включая его название, дату проведения,
     * результат выполнения и оценку. Формат вывода разделяет поля символом '|'.
     */
    void print() const override {
        std::cout << name << " | Дата: " << date << " | Результат: " << result << " | Оценка: " << grade << '\n';
    }
    /**
     * Создаёт и возвращает глубокую копию текущего объекта Run1000.
     *
     * Этот метод предоставляет реализацию для создания копии объекта Run1000,
     * сохраняя все его текущие данные. Возвращаемая копия размещается на
     * динамической памяти и управляется с использованием умного указателя shared_ptr.
     *
     * @return Умный указатель (shared_ptr) на новый экземпляр Run1000, полностью повторяющий текущий объект.
     */
    std::shared_ptr<Normative> clone() const override {
        return std::make_shared<Run1000>(*this);
    }
};

/**
 * Представляет класс PullUps, наследуемый от базового класса Normative,
 * для обработки данных, связанных с подтягиваниями, как с нормативом.
 *
 * Класс PullUps предоставляет реализацию инициализации, вывода данных
 * и клонирования для работы с нормативами, связанными с подтягиваниями.
 */
struct PullUps : public Normative {
    /**
     * Конструктор класса PullUps по умолчанию.
     *
     * Устанавливает значение названия норматива как "Подтягивания".
     *
     * @return Экземпляр класса PullUps, созданный с использованием конструктора по умолчанию.
     */
    PullUps() { name = "Подтягивания"; }
    /**
     * Конструктор класса PullUps, предназначенный для инициализации
     * объекта с заданными параметрами.
     *
     * @param date_ дата проведения упражнения
     * @param result_ результат упражнения в числовом формате
     * @param grade_ оценка за выполнение упражнения
     * @return Создает объект класса PullUps с указанными параметрами.
     */
    PullUps(const std::string& date_, double result_, int grade_) {
        name = "Подтягивания";
        date = date_;
        result = result_;
        grade = grade_;
    }

    /**
     * Выводит информацию о выполнении упражнения "Подтягивания" в стандартный вывод.
     *
     * Метод осуществляет печать данных о названии норматива, дате выполнения,
     * достигнутом результате и выставленной оценке. Вывод упрощает визуальный
     * анализ данных пользователем и является вспомогательным инструментом
     * для быстрой проверки состояния объекта.
     *
     * Данный метод переопределяет виртуальную функцию `print` базового класса Normative.
     */
    void print() const override {
        std::cout << name << " | Дата: " << date << " | Результат: " << result << " | Оценка: " << grade << '\n';
    }

    /**
     * Создаёт и возвращает глубокую копию текущего экземпляра PullUps.
     *
     * Метод создаёт новый экземпляр PullUps, копируя данные из
     * текущего объекта, и возвращает указатель на созданный экземпляр.
     *
     * @return Умный указатель (shared_ptr) на новый экземпляр PullUps, являющийся копией текущего объекта.
     */
    std::shared_ptr<Normative> clone() const override {
        return std::make_shared<PullUps>(*this);
    }
};

/**
 * Представляет класс Swim, расширяющий функциональность базового класса Normative
 * для обработки и анализа данных, связанных с плаванием.
 *
 * Этот класс инкапсулирует поведение и атрибуты, характерные для нормативов по плаванию,
 * предоставляя возможность вывода информации о них и создания копий объектов.
 */
struct Swim : public Normative {
    /**
     * Конструктор по умолчанию для класса Swim.
     * Инициализирует название норматива значением "Плавание".
     *
     * @return Экземпляр Swim, созданный с использованием конструктора по умолчанию.
     */
    Swim() { name = "Плавание"; }
    /**
     * Конструктор класса Swim, который инициализирует объект с заданной датой, результатом и оценкой.
     *
     * @param date_ Дата проведения теста.
     * @param result_ Результат теста.
     * @param grade_ Оценка за тест.
     * @return Экземпляр класса Swim с заданными значениями параметров.
     */
    Swim(const std::string& date_, double result_, int grade_) {
        name = "Плавание";
        date = date_;
        result = result_;
        grade = grade_;
    }

    /**
     * Переопределённый метод для вывода данных объекта в стандартный вывод.
     *
     * Метод формирует строку, содержащую имя норматива, дату, результат
     * и оценку, а затем выводит её в консоль. Используется для предоставления
     * информации о текущем экземпляре объекта в удобочитаемом формате.
     */
    void print() const override {
        std::cout << name << " | Дата: " << date << " | Результат: " << result << " | Оценка: " << grade << '\n';
    }

    /**
     * Создаёт глубокую копию текущего объекта класса Swim.
     * Этот метод позволяет создать новый объект Swim, который
     * является точной копией текущего объекта, обеспечивая инкапсуляцию
     * и корректную работу с полиморфными объектами через интерфейс базы.
     *
     * @return Умный указатель (std::shared_ptr) на новый объект Swim,
     *         являющийся копией текущего объекта.
     */
    std::shared_ptr<Normative> clone() const override {
        return std::make_shared<Swim>(*this);
    }
};

#endif
#ifndef STUDENT_H
#define STUDENT_H

#include <string>
#include <vector>
#include <memory>
#include "normative.h"

/**
 * @struct Student
 * Представляет студента с личными данными и академической информацией.
 */
struct Student {
    /**
     * Печатает заголовок таблицы для отображения информации о студентах.
     *
     * Этот метод выводит названия колонок таблицы, таких как
     * "Фамилия", "Инициалы", "Год", "Группа" и "Зачетная книжка".
     * Каждая колонка форматируется с заданной шириной для корректного
     * выравнивания данных. Также выводится разделительная линия
     * под заголовком для улучшения читаемости.
     *
     * Эта статическая функция используется для стандартизации
     * заголовков таблиц при многократных вызовах отображения студентов.
     */
    static void printTableHeader();

    /**
     * @brief Выводит строку с данными студента в отформатированном виде.
     *
     * Данные включают фамилию, инициалы, год поступления, группу
     * и номер зачетной книжки. Каждое поле форматируется с заданной шириной
     * для выравнивания в табличной структуре.
     * Функция предполагает, что стандартный вывод настроен на текстовый режим
     * и использует `std::setw` для форматирования.
     *
     * Обычно используется вместе с `Student::printTableHeader()` для
     * формирования полной табличной информации о студентах.
     */
    void printTableRow() const;

    /**
     * Фамилия студента.
     *
     * Переменная хранит фамилию студента в виде строки.
     * Является ключевым идентификатором объекта `Student` и
     * используется при отображении, сортировке и валидации ввода.
     */
    std::string surname;
    /**
     * @brief Хранит инициалы студента.
     *
     * Переменная представляет сокращённые инициалы полного имени студента.
     * Используется при хранении данных, валидации ввода и печати
     * в табличном или форматированном виде.
     *
     * @note Корректность значений проверяется функцией `isValidName` при разборе ввода.
     * Пример инициалов: "А.А.", "Б.В." и т.д.
     */
    std::string initials;
    /**
     * Представляет год поступления студента.
     * Целочисленное значение, указывающее календарный год поступления.
     *
     * Практическое применение:
     * - Используется при выводе информации, экспорте/импорте данных и проверках.
     * - Позволяет группировать студентов по году поступления.
     *
     * Ограничения:
     * - Ожидается валидный календарный год (проверяется функцией `isValidYear`, если применимо).
     */
    int admissionYear;
    /**
     * @brief Представляет академическую группу, к которой принадлежит студент.
     *
     * Хранит название или идентификатор группы. Используется
     * при сохранении и загрузке данных, а также при отображении информации о студенте.
     */
    std::string groupName;
    /**
     * Представляет номер зачетной книжки студента.
     * Уникальный идентификатор студента, используемый для учета учебных результатов.
     */
    std::string recordBook;
    /**
     * Представляет коллекцию нормативов, связанных со студентом.
     *
     * Вектор содержит умные указатели на экземпляры `Normative` или его производных классов.
     * Каждый элемент отражает данные по конкретному нормативу (тип, дата, результат, оценка).
     *
     * Примеры использования переменной `tests`:
     * - Отслеживание выполнения нормативов (например, физических или учебных).
     * - Расчёт средней оценки по заданному типу норматива.
     * - Проверка наличия задолженностей (например, не сданных нормативов).
     *
     * Возможные действия с вектором:
     * - Итерация для анализа, расчётов и вывода.
     * - Добавление новых нормативов при импорте данных.
     * - Классификация/фильтрация по типу и другим критериям.
     *
     * Использование `std::shared_ptr` обеспечивает корректное управление памятью
     * и поддержку полиморфизма при работе с производными от `Normative` классами.
     */
    std::vector<std::shared_ptr<Normative>> tests;

    /**
     * Конструктор по умолчанию структуры Student.
     * Инициализирует объект значениями по умолчанию.
     *
     * @return Объект Student с инициализированными значениями по умолчанию.
     */
    Student() = default;

    /**
     * Конструктор структуры Student с заданными значениями.
     *
     * @param surname_ Фамилия студента.
     * @param initials_ Инициалы студента.
     * @param year_ Год поступления.
     * @param group_ Название группы.
     * @param record_ Номер зачетной книжки.
     */
    Student(const std::string& surname_, const std::string& initials_, int year_,
            const std::string& group_, const std::string& record_)
        : surname(surname_), initials(initials_), admissionYear(year_),
          groupName(group_), recordBook(record_) {}

    /**
     * @brief Выводит полную информацию об объекте Student.
     *
     * Печатает фамилию, инициалы, год поступления, группу, номер зачетной книжки
     * и все связанные нормативы. Для каждого норматива вызывается метод `print`
     * класса `Normative`.
     *
     * Метод не изменяет состояние объекта. Используется для отладки или логирования.
     */
    void print() const;

    /**
     * Вычисляет среднюю оценку студента по заданному типу норматива.
     *
     * Если параметр normativeType пустой, рассчитывается средняя оценка
     * по всем нормативам. Иначе — только по нормативам указанного типа.
     *
     * @param normativeType Тип норматива для расчета средней оценки.
     *                      Если пустой — учитываются все типы.
     * @return Средняя оценка в виде double. Возвращает 0.0, если нет подходящих нормативов.
     */
    double averageGrade(const std::string& normativeType = "") const;

    /**
     * Проверяет, есть ли у студента задолженность по указанному нормативу.
     *
     * Задолженность определяется как оценка меньше 3. Если тип норматива
     * не задан, проверяются все типы нормативов.
     *
     * @param normativeType Название норматива. Если пустое, проверяются все.
     * @return true, если есть задолженность; false — если все нормативы сданы.
     */
    bool hasDebt(const std::string& normativeType) const;
};

#endif
#ifndef STUDENT_MANAGER_H
#define STUDENT_MANAGER_H

#include <vector>
#include <string>
#include "student.h"

/**
 * Отображает консольное меню для управления записями о спортивных нормативах.
 *
 * Меню предоставляет ряд опций для операций, таких как добавление, редактирование,
 * удаление записей студентов, просмотр списков студентов, управление группами,
 * а также импорт и экспорт данных.
 *
 * Метод не принимает параметров и ничего не возвращает.
 * Он просто выводит список опций меню в консоль.
 *
 * Опции меню включают:
 * - Добавление студента
 * - Отображение всех студентов
 * - Показ списка студентов с задолженностями по нормативам
 * - Сортировка групп по средней оценке
 * - Удаление студента
 * - Редактирование информации о студенте
 * - Импорт данных из TXT-файла
 * - Отображение результатов нормативов по группе
 * - Выход из программы
 */
void showMenu();

/**
 * Добавляет нового студента в список, собирая информацию от пользователя.
 * После ввода данные проверяются и сохраняются в список.
 *
 * @param students Список студентов, в который будет добавлен новый студент.
 */
void addStudent(std::vector<Student>& students);

/**
 * Удаляет студента из переданного списка по номеру зачетной книжки.
 * Метод запрашивает у пользователя номер зачётной книжки, ищет соответствующего студента
 * и запрашивает подтверждение на удаление. Если студент найден и удаление подтверждено,
 * он удаляется из списка, а изменения сохраняются в файл.
 *
 * @param students Ссылка на вектор объектов Student, представляющий список
 *                 студентов для поиска и возможного удаления.
 */
void deleteStudent(std::vector<Student>& students);

/**
 * Редактирует данные студента из заданного списка.
 * Пользователю предлагается выбрать студента по номеру зачётной книжки
 * и изменить его данные: фамилию, инициалы, год поступления, группу и нормативы.
 *
 * @param students Вектор, содержащий список студентов для редактирования.
 */
void editStudent(std::vector<Student>& students);

/**
 * Выводит подробную информацию о всех студентах и их результатах нормативов.
 * Отображает сводную таблицу с основной информацией, а затем — подробности по нормативам,
 * если они имеются.
 *
 * @param students Вектор объектов Student, чья информация должна быть отображена.
 *                 Если вектор пуст, выводится соответствующее сообщение.
 */
void printAll(const std::vector<Student>& students);

/**
 * Выводит список студентов, имеющих задолженности по заданному нормативу.
 *
 * Метод запрашивает у пользователя название норматива (например, "Бег 100м", "Бег 1000м",
 * "Подтягивания", "Плавание") и ищет студентов с задолженностями по нему.
 * Если такие студенты найдены — их данные выводятся. В противном случае — соответствующее сообщение.
 *
 * @param students Вектор объектов Student для проверки наличия задолженностей.
 */
void printDebtorsByNorm(const std::vector<Student>& students);

/**
 * Сортирует и отображает группы студентов по средней оценке.
 * Пользователю предлагается ввести критерий (название норматива).
 * Функция рассчитывает среднюю оценку для каждой группы и отображает
 * ранжирование в порядке убывания.
 *
 * @param students Вектор объектов Student, содержащих информацию о группах и оценках.
 */
void sortGroupsByAvgGrade(const std::vector<Student>& students);

/**
 * @brief Импортирует данные студентов из TXT-файла в переданный вектор Student.
 *
 * Функция запрашивает у пользователя имя файла, читает данные студентов
 * из указанного файла и добавляет их в вектор. При успешном импорте данные сохраняются.
 * Обрабатываются ошибки, возникшие в процессе импорта.
 *
 * @param students Ссылка на вектор объектов Student, в который будут добавлены импортированные данные.
 */
void importFromTxt(std::vector<Student>& students);

/**
 * Выводит результаты по заданному нормативу для указанной группы.
 *
 * Функция запрашивает у пользователя название группы и название норматива.
 * Затем проходит по списку студентов, находит участников группы
 * и выводит их результаты по указанному нормативу. Если результатов нет —
 * выводится соответствующее сообщение.
 *
 * @param students Вектор объектов Student с данными о студентах,
 * включая принадлежность к группам и результаты нормативов.
 */
void printNormResultsByGroup(const std::vector<Student>& students);

#endif
